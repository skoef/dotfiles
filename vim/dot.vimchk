#!/bin/sh

usage() {
    echo "$(basename ${0}) -f filename [-t filetype]"
    exit 1
}

# is linter present
haslinter() {
    local _linter
    _linter=${1}

    [ -z "$(which ${_linter})" ] && return 1

    if [ ! -x ${_linter} ] && [ ! -x $(which ${_linter}) ]; then
        return 1
    fi

    return 0
}

# run linter on file
check() {
    local _linter _cmd _regexp _tmpfile
    _linter=${1}
    _cmd="${2} 2>&1"
    _regexp=${3}

    echo -n "${_linter}: "
    [ ! -z "${_regexp}" ] && _cmd="${_cmd} | grep -vE '${_regexp}'"
    if ! _tmpfile=`mktemp -t vimchk.XXXX`; then
        echo "FAIL, could not create tmpfile"
        return 1
    fi

    eval ${_cmd} > ${_tmpfile}
    if [ -s ${_tmpfile} ]; then
        echo "FAIL:"
        cat ${_tmpfile}
    else
        echo "OK"
    fi

    rm ${_tmpfile}
}

lint() {
    local filetype=${1} filename=${2} recurse=1
    [ $# -gt 2 ] && recurse=0

    case ${filetype} in
        pp|puppet)
            if haslinter puppet; then
                check puppet "puppet parser --parser future validate ${filename}"
            fi

            if haslinter puppet-lint; then
                check puppet-lint "puppet-lint --with-filename ${filename}"
            fi
            ;;
        php)
            if haslinter php; then
                check php "php -l ${filename}" '^No syntax errors detected in '
            fi
            ;;
        erb)
            if haslinter erb && haslinter ruby; then
                check erb "erb -x -T '-' -P ${filename} | ruby -c" "Syntax OK"
            fi
            ;;
        rb|ruby)
            if haslinter ruby; then
                check ruby "ruby -c ${filename}" "Syntax OK"
            fi
            ;;
        py|python)
            if haslinter python; then
                check python "python -m py_compile ${filename}"
            fi
            ;;
        sh|shell)
            if head -1 ${filename} | grep -q bash && \
                haslinter bash; then
                check bash "bash -n ${filename}"
            else
                # no need to check for sh presence :)
                check sh "sh -n ${filename}"
            fi
            ;;
        yaml)
            if haslinter ruby; then
                check yaml "ruby -e \"require 'yaml'; YAML.parse(File.open('${filename}'))\""
            fi
            ;;
        *)
            if [ ${recurse} -eq 0 ]; then
                return
            fi

            # unknown file type
            # try to get filetype from shebang
            filetype=$(head -1 ${filename} | \
              awk '{print $1}' | \
              sed -E 's/^#!//' | \
              awk -F '/' '{print $NF}')
            if [ -z "${filetype}" ]; then
                return
            fi

            lint ${filetype} ${filename} 0
            ;;
    esac
}

while getopts f:t:h opt; do
    case "${opt}" in
        f) filename=${OPTARG} ;;
        t) filetype=${OPTARG} ;;
        h) usage ;;
        *) usage ;;
    esac
done

[ -z "${filename}" ] && usage
[ -z "${filetype}" ] && filetype=${filename##*.}

if [ ! -f ${filename} ]; then
    echo "no such file ${filename}"
    exit 1
elif [ ! -r ${filename} ]; then
    echo "${filename} is not readable, permission denied"
    exit 1
fi

lint "${filetype}" "${filename}"
